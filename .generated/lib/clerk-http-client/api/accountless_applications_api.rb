=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: 2021-02-05
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: unset

=end

require 'cgi'

module ClerkHttpClient
  class AccountlessApplicationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Complete an accountless application [EXPERIMENTAL]
    # Completes an accountless application. [EXPERIMENTAL]
    # @param [Hash] opts the optional parameters
    # @return [AccountlessApplication]

    def complete_accountless_application(opts = {})
      data, _status_code, _headers = complete_accountless_application_with_http_info(opts)
      data
    end

    # Complete an accountless application [EXPERIMENTAL]
    # Completes an accountless application. [EXPERIMENTAL]
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountlessApplication, Integer, Hash)>] AccountlessApplication data, response status code and response headers
    # POST 
    def complete_accountless_application_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountlessApplicationsApi.complete_accountless_application ...'
      end
      # resource path
      local_var_path = '/accountless_applications/complete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountlessApplication'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountlessApplicationsApi.complete_accountless_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountlessApplicationsApi#complete_accountless_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an accountless application [EXPERIMENTAL]
    # Creates a new accountless application. [EXPERIMENTAL]
    # @param [Hash] opts the optional parameters
    # @return [AccountlessApplication]

    def create_accountless_application(opts = {})
      data, _status_code, _headers = create_accountless_application_with_http_info(opts)
      data
    end

    # Create an accountless application [EXPERIMENTAL]
    # Creates a new accountless application. [EXPERIMENTAL]
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountlessApplication, Integer, Hash)>] AccountlessApplication data, response status code and response headers
    # POST 
    def create_accountless_application_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountlessApplicationsApi.create_accountless_application ...'
      end
      # resource path
      local_var_path = '/accountless_applications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountlessApplication'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountlessApplicationsApi.create_accountless_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountlessApplicationsApi#create_accountless_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
