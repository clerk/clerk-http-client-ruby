=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: 2021-02-05
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: unset

=end

require 'cgi'

module ClerkHttpClient
  class AllowListBlockListApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add identifier to the allow-list
    # Create an identifier allowed to sign up to an instance
    # @param [Hash] opts the optional parameters
    # @option opts [CreateAllowlistIdentifierRequest] :create_allowlist_identifier_request 
    # @return [AllowlistIdentifier]

    def create_allowlist_identifier(opts = {})
      data, _status_code, _headers = create_allowlist_identifier_with_http_info(opts)
      data
    end

    # Add identifier to the allow-list
    # Create an identifier allowed to sign up to an instance
    # @param [Hash] opts the optional parameters
    # @option opts [CreateAllowlistIdentifierRequest] :create_allowlist_identifier_request 
    # @return [Array<(AllowlistIdentifier, Integer, Hash)>] AllowlistIdentifier data, response status code and response headers
    # POST 
    def create_allowlist_identifier_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllowListBlockListApi.create_allowlist_identifier ...'
      end
      # resource path
      local_var_path = '/allowlist_identifiers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_allowlist_identifier_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AllowlistIdentifier'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AllowListBlockListApi.create_allowlist_identifier",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllowListBlockListApi#create_allowlist_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add identifier to the block-list
    # Create an identifier that is blocked from accessing an instance
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBlocklistIdentifierRequest] :create_blocklist_identifier_request 
    # @return [BlocklistIdentifier]

    def create_blocklist_identifier(opts = {})
      data, _status_code, _headers = create_blocklist_identifier_with_http_info(opts)
      data
    end

    # Add identifier to the block-list
    # Create an identifier that is blocked from accessing an instance
    # @param [Hash] opts the optional parameters
    # @option opts [CreateBlocklistIdentifierRequest] :create_blocklist_identifier_request 
    # @return [Array<(BlocklistIdentifier, Integer, Hash)>] BlocklistIdentifier data, response status code and response headers
    # POST 
    def create_blocklist_identifier_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllowListBlockListApi.create_blocklist_identifier ...'
      end
      # resource path
      local_var_path = '/blocklist_identifiers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_blocklist_identifier_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'BlocklistIdentifier'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AllowListBlockListApi.create_blocklist_identifier",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllowListBlockListApi#create_blocklist_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete identifier from allow-list
    # Delete an identifier from the instance allow-list
    # @param identifier_id [String] The ID of the identifier to delete from the allow-list
    # @param [Hash] opts the optional parameters
    # @return [DeletedObject]

    def delete_allowlist_identifier(identifier_id, opts = {})
      data, _status_code, _headers = delete_allowlist_identifier_with_http_info(identifier_id, opts)
      data
    end

    # Delete identifier from allow-list
    # Delete an identifier from the instance allow-list
    # @param identifier_id [String] The ID of the identifier to delete from the allow-list
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    # DELETE 
    def delete_allowlist_identifier_with_http_info(identifier_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllowListBlockListApi.delete_allowlist_identifier ...'
      end
      # verify the required parameter 'identifier_id' is set
      if @api_client.config.client_side_validation && identifier_id.nil?
        fail ArgumentError, "Missing the required parameter 'identifier_id' when calling AllowListBlockListApi.delete_allowlist_identifier"
      end
      # resource path
      local_var_path = '/allowlist_identifiers/{identifier_id}'.sub('{' + 'identifier_id' + '}', CGI.escape(identifier_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeletedObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AllowListBlockListApi.delete_allowlist_identifier",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllowListBlockListApi#delete_allowlist_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete identifier from block-list
    # Delete an identifier from the instance block-list
    # @param identifier_id [String] The ID of the identifier to delete from the block-list
    # @param [Hash] opts the optional parameters
    # @return [DeletedObject]

    def delete_blocklist_identifier(identifier_id, opts = {})
      data, _status_code, _headers = delete_blocklist_identifier_with_http_info(identifier_id, opts)
      data
    end

    # Delete identifier from block-list
    # Delete an identifier from the instance block-list
    # @param identifier_id [String] The ID of the identifier to delete from the block-list
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    # DELETE 
    def delete_blocklist_identifier_with_http_info(identifier_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllowListBlockListApi.delete_blocklist_identifier ...'
      end
      # verify the required parameter 'identifier_id' is set
      if @api_client.config.client_side_validation && identifier_id.nil?
        fail ArgumentError, "Missing the required parameter 'identifier_id' when calling AllowListBlockListApi.delete_blocklist_identifier"
      end
      # resource path
      local_var_path = '/blocklist_identifiers/{identifier_id}'.sub('{' + 'identifier_id' + '}', CGI.escape(identifier_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeletedObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AllowListBlockListApi.delete_blocklist_identifier",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllowListBlockListApi#delete_blocklist_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all identifiers on the allow-list
    # Get a list of all identifiers allowed to sign up to an instance
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :paginated Whether to paginate the results. If true, the results will be paginated. If false, the results will not be paginated.
    # @option opts [Integer] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @option opts [Integer] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @return [Array<AllowlistIdentifier>]

    def list_allowlist_identifiers(opts = {})
      data, _status_code, _headers = list_allowlist_identifiers_with_http_info(opts)
      data
    end

    # List all identifiers on the allow-list
    # Get a list of all identifiers allowed to sign up to an instance
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :paginated Whether to paginate the results. If true, the results will be paginated. If false, the results will not be paginated.
    # @option opts [Integer] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @option opts [Integer] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @return [Array<(Array<AllowlistIdentifier>, Integer, Hash)>] Array<AllowlistIdentifier> data, response status code and response headers
    # GET array
    def list_allowlist_identifiers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllowListBlockListApi.list_allowlist_identifiers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AllowListBlockListApi.list_allowlist_identifiers, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AllowListBlockListApi.list_allowlist_identifiers, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling AllowListBlockListApi.list_allowlist_identifiers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/allowlist_identifiers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'paginated'] = opts[:'paginated'] if !opts[:'paginated'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AllowlistIdentifier>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AllowListBlockListApi.list_allowlist_identifiers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllowListBlockListApi#list_allowlist_identifiers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all identifiers on the block-list
    # Get a list of all identifiers which are not allowed to access an instance
    # @param [Hash] opts the optional parameters
    # @return [BlocklistIdentifiers]

    def list_blocklist_identifiers(opts = {})
      data, _status_code, _headers = list_blocklist_identifiers_with_http_info(opts)
      data
    end

    # List all identifiers on the block-list
    # Get a list of all identifiers which are not allowed to access an instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlocklistIdentifiers, Integer, Hash)>] BlocklistIdentifiers data, response status code and response headers
    # GET 
    def list_blocklist_identifiers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AllowListBlockListApi.list_blocklist_identifiers ...'
      end
      # resource path
      local_var_path = '/blocklist_identifiers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BlocklistIdentifiers'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AllowListBlockListApi.list_blocklist_identifiers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AllowListBlockListApi#list_blocklist_identifiers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
