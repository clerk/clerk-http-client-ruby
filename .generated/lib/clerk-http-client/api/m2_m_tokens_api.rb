=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: 2021-02-05
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: unset

=end

require 'cgi'

module ClerkHttpClient
  class M2MTokensApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a M2M Token
    # Creates a new M2M Token. Must be authenticated via a Machine Secret Key.
    # @param create_m2_m_token_request [CreateM2MTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateM2MToken201Response]

    def create_m2_m_token(create_m2_m_token_request, opts = {})
      data, _status_code, _headers = create_m2_m_token_with_http_info(create_m2_m_token_request, opts)
      data
    end

    # Create a M2M Token
    # Creates a new M2M Token. Must be authenticated via a Machine Secret Key.
    # @param create_m2_m_token_request [CreateM2MTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateM2MToken201Response, Integer, Hash)>] CreateM2MToken201Response data, response status code and response headers
    # POST 
    def create_m2_m_token_with_http_info(create_m2_m_token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: M2MTokensApi.create_m2_m_token ...'
      end
      # verify the required parameter 'create_m2_m_token_request' is set
      if @api_client.config.client_side_validation && create_m2_m_token_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_m2_m_token_request' when calling M2MTokensApi.create_m2_m_token"
      end
      # resource path
      local_var_path = '/m2m_tokens'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_m2_m_token_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateM2MToken201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"M2MTokensApi.create_m2_m_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: M2MTokensApi#create_m2_m_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get M2M Tokens
    # Fetches M2M tokens for a specific machine.  This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.  - When fetching M2M tokens with a Machine Secret Key, only tokens associated with the authenticated machine can be retrieved. - When fetching M2M tokens with a Clerk Secret Key, tokens for any machine in the instance can be retrieved.
    # @param subject [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :revoked  (default to false)
    # @option opts [Boolean] :expired  (default to false)
    # @option opts [Float] :limit  (default to 10)
    # @option opts [Float] :offset  (default to 0)
    # @return [GetM2MTokens200Response]

    def get_m2_m_tokens(subject, opts = {})
      data, _status_code, _headers = get_m2_m_tokens_with_http_info(subject, opts)
      data
    end

    # Get M2M Tokens
    # Fetches M2M tokens for a specific machine.  This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.  - When fetching M2M tokens with a Machine Secret Key, only tokens associated with the authenticated machine can be retrieved. - When fetching M2M tokens with a Clerk Secret Key, tokens for any machine in the instance can be retrieved.
    # @param subject [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :revoked  (default to false)
    # @option opts [Boolean] :expired  (default to false)
    # @option opts [Float] :limit  (default to 10)
    # @option opts [Float] :offset  (default to 0)
    # @return [Array<(GetM2MTokens200Response, Integer, Hash)>] GetM2MTokens200Response data, response status code and response headers
    # GET 
    def get_m2_m_tokens_with_http_info(subject, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: M2MTokensApi.get_m2_m_tokens ...'
      end
      # verify the required parameter 'subject' is set
      if @api_client.config.client_side_validation && subject.nil?
        fail ArgumentError, "Missing the required parameter 'subject' when calling M2MTokensApi.get_m2_m_tokens"
      end
      pattern = Regexp.new(/^mch_\w{27}$/)
      if @api_client.config.client_side_validation && subject !~ pattern
        fail ArgumentError, "invalid value for 'subject' when calling M2MTokensApi.get_m2_m_tokens, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling M2MTokensApi.get_m2_m_tokens, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling M2MTokensApi.get_m2_m_tokens, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling M2MTokensApi.get_m2_m_tokens, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/m2m_tokens'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'subject'] = subject
      query_params[:'revoked'] = opts[:'revoked'] if !opts[:'revoked'].nil?
      query_params[:'expired'] = opts[:'expired'] if !opts[:'expired'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetM2MTokens200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"M2MTokensApi.get_m2_m_tokens",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: M2MTokensApi#get_m2_m_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke a M2M Token
    # Revokes a M2M Token.  This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.  - When revoking a M2M Token with a Machine Secret Key, the token must managed by the Machine associated with the Machine Secret Key. - When revoking a M2M Token with a Clerk Secret Key, any token on the Instance can be revoked.
    # @param m2m_token_id [String] 
    # @param revoke_m2_m_token_request [RevokeM2MTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetM2MTokens200ResponseM2mTokensInner]

    def revoke_m2_m_token(m2m_token_id, revoke_m2_m_token_request, opts = {})
      data, _status_code, _headers = revoke_m2_m_token_with_http_info(m2m_token_id, revoke_m2_m_token_request, opts)
      data
    end

    # Revoke a M2M Token
    # Revokes a M2M Token.  This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.  - When revoking a M2M Token with a Machine Secret Key, the token must managed by the Machine associated with the Machine Secret Key. - When revoking a M2M Token with a Clerk Secret Key, any token on the Instance can be revoked.
    # @param m2m_token_id [String] 
    # @param revoke_m2_m_token_request [RevokeM2MTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetM2MTokens200ResponseM2mTokensInner, Integer, Hash)>] GetM2MTokens200ResponseM2mTokensInner data, response status code and response headers
    # POST 
    def revoke_m2_m_token_with_http_info(m2m_token_id, revoke_m2_m_token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: M2MTokensApi.revoke_m2_m_token ...'
      end
      # verify the required parameter 'm2m_token_id' is set
      if @api_client.config.client_side_validation && m2m_token_id.nil?
        fail ArgumentError, "Missing the required parameter 'm2m_token_id' when calling M2MTokensApi.revoke_m2_m_token"
      end
      pattern = Regexp.new(/^mt_[0-9A-Fa-f]{32}$/)
      if @api_client.config.client_side_validation && m2m_token_id !~ pattern
        fail ArgumentError, "invalid value for 'm2m_token_id' when calling M2MTokensApi.revoke_m2_m_token, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'revoke_m2_m_token_request' is set
      if @api_client.config.client_side_validation && revoke_m2_m_token_request.nil?
        fail ArgumentError, "Missing the required parameter 'revoke_m2_m_token_request' when calling M2MTokensApi.revoke_m2_m_token"
      end
      # resource path
      local_var_path = '/m2m_tokens/{m2m_token_id}/revoke'.sub('{' + 'm2m_token_id' + '}', CGI.escape(m2m_token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(revoke_m2_m_token_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetM2MTokens200ResponseM2mTokensInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"M2MTokensApi.revoke_m2_m_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: M2MTokensApi#revoke_m2_m_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify a M2M Token
    # Verifies a M2M Token.  This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.  - When verifying a M2M Token with a Machine Secret Key, the token must be granted access to the Machine associated with the Machine Secret Key. - When verifying a M2M Token with a Clerk Secret Key, any token on the Instance can be verified.
    # @param verify_m2_m_token_request [VerifyM2MTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetM2MTokens200ResponseM2mTokensInner]

    def verify_m2_m_token(verify_m2_m_token_request, opts = {})
      data, _status_code, _headers = verify_m2_m_token_with_http_info(verify_m2_m_token_request, opts)
      data
    end

    # Verify a M2M Token
    # Verifies a M2M Token.  This endpoint can be authenticated by either a Machine Secret Key or by a Clerk Secret Key.  - When verifying a M2M Token with a Machine Secret Key, the token must be granted access to the Machine associated with the Machine Secret Key. - When verifying a M2M Token with a Clerk Secret Key, any token on the Instance can be verified.
    # @param verify_m2_m_token_request [VerifyM2MTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetM2MTokens200ResponseM2mTokensInner, Integer, Hash)>] GetM2MTokens200ResponseM2mTokensInner data, response status code and response headers
    # POST 
    def verify_m2_m_token_with_http_info(verify_m2_m_token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: M2MTokensApi.verify_m2_m_token ...'
      end
      # verify the required parameter 'verify_m2_m_token_request' is set
      if @api_client.config.client_side_validation && verify_m2_m_token_request.nil?
        fail ArgumentError, "Missing the required parameter 'verify_m2_m_token_request' when calling M2MTokensApi.verify_m2_m_token"
      end
      # resource path
      local_var_path = '/m2m_tokens/verify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(verify_m2_m_token_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetM2MTokens200ResponseM2mTokensInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"M2MTokensApi.verify_m2_m_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: M2MTokensApi#verify_m2_m_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
