=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: 2021-02-05
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: unset

=end

require 'cgi'

module ClerkHttpClient
  class MachinesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a machine
    # Creates a new machine.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMachineRequest] :create_machine_request 
    # @return [Machine]

    def create_machine(opts = {})
      data, _status_code, _headers = create_machine_with_http_info(opts)
      data
    end

    # Create a machine
    # Creates a new machine.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMachineRequest] :create_machine_request 
    # @return [Array<(Machine, Integer, Hash)>] Machine data, response status code and response headers
    # POST 
    def create_machine_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.create_machine ...'
      end
      # resource path
      local_var_path = '/machines'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_machine_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Machine'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"MachinesApi.create_machine",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#create_machine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a machine scope
    # Creates a new machine scope, allowing the specified machine to access another machine. Maximum of 25 scopes per machine.
    # @param machine_id [String] The ID of the machine that will have access to another machine
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMachineScopeRequest] :create_machine_scope_request 
    # @return [MachineScope]

    def create_machine_scope(machine_id, opts = {})
      data, _status_code, _headers = create_machine_scope_with_http_info(machine_id, opts)
      data
    end

    # Create a machine scope
    # Creates a new machine scope, allowing the specified machine to access another machine. Maximum of 25 scopes per machine.
    # @param machine_id [String] The ID of the machine that will have access to another machine
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMachineScopeRequest] :create_machine_scope_request 
    # @return [Array<(MachineScope, Integer, Hash)>] MachineScope data, response status code and response headers
    # POST 
    def create_machine_scope_with_http_info(machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.create_machine_scope ...'
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.create_machine_scope"
      end
      # resource path
      local_var_path = '/machines/{machine_id}/scopes'.sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_machine_scope_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'MachineScope'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"MachinesApi.create_machine_scope",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#create_machine_scope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a machine
    # Deletes a machine.
    # @param machine_id [String] The ID of the machine to delete
    # @param [Hash] opts the optional parameters
    # @return [DeleteMachine200Response]

    def delete_machine(machine_id, opts = {})
      data, _status_code, _headers = delete_machine_with_http_info(machine_id, opts)
      data
    end

    # Delete a machine
    # Deletes a machine.
    # @param machine_id [String] The ID of the machine to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteMachine200Response, Integer, Hash)>] DeleteMachine200Response data, response status code and response headers
    # DELETE 
    def delete_machine_with_http_info(machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.delete_machine ...'
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.delete_machine"
      end
      # resource path
      local_var_path = '/machines/{machine_id}'.sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteMachine200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"MachinesApi.delete_machine",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#delete_machine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a machine scope
    # Deletes a machine scope, removing access from one machine to another.
    # @param machine_id [String] The ID of the machine that has access to another machine
    # @param other_machine_id [String] The ID of the machine that is being accessed
    # @param [Hash] opts the optional parameters
    # @return [DeleteMachineScope200Response]

    def delete_machine_scope(machine_id, other_machine_id, opts = {})
      data, _status_code, _headers = delete_machine_scope_with_http_info(machine_id, other_machine_id, opts)
      data
    end

    # Delete a machine scope
    # Deletes a machine scope, removing access from one machine to another.
    # @param machine_id [String] The ID of the machine that has access to another machine
    # @param other_machine_id [String] The ID of the machine that is being accessed
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteMachineScope200Response, Integer, Hash)>] DeleteMachineScope200Response data, response status code and response headers
    # DELETE 
    def delete_machine_scope_with_http_info(machine_id, other_machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.delete_machine_scope ...'
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.delete_machine_scope"
      end
      # verify the required parameter 'other_machine_id' is set
      if @api_client.config.client_side_validation && other_machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'other_machine_id' when calling MachinesApi.delete_machine_scope"
      end
      # resource path
      local_var_path = '/machines/{machine_id}/scopes/{other_machine_id}'.sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s)).sub('{' + 'other_machine_id' + '}', CGI.escape(other_machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteMachineScope200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"MachinesApi.delete_machine_scope",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#delete_machine_scope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a machine
    # Returns the details of a machine.
    # @param machine_id [String] The ID of the machine to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Machine]

    def get_machine(machine_id, opts = {})
      data, _status_code, _headers = get_machine_with_http_info(machine_id, opts)
      data
    end

    # Retrieve a machine
    # Returns the details of a machine.
    # @param machine_id [String] The ID of the machine to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Machine, Integer, Hash)>] Machine data, response status code and response headers
    # GET 
    def get_machine_with_http_info(machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.get_machine ...'
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.get_machine"
      end
      # resource path
      local_var_path = '/machines/{machine_id}'.sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Machine'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"MachinesApi.get_machine",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#get_machine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of machines for an instance
    # This request returns the list of machines for an instance. The machines are ordered by descending creation date (i.e. most recent machines will be returned first)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @option opts [Integer] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @option opts [String] :query Returns machines with ID or name that match the given query. Uses exact match for machine ID and partial match for name.
    # @return [ListMachines200Response]

    def list_machines(opts = {})
      data, _status_code, _headers = list_machines_with_http_info(opts)
      data
    end

    # Get a list of machines for an instance
    # This request returns the list of machines for an instance. The machines are ordered by descending creation date (i.e. most recent machines will be returned first)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @option opts [Integer] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @option opts [String] :query Returns machines with ID or name that match the given query. Uses exact match for machine ID and partial match for name.
    # @return [Array<(ListMachines200Response, Integer, Hash)>] ListMachines200Response data, response status code and response headers
    # GET 
    def list_machines_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.list_machines ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling MachinesApi.list_machines, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling MachinesApi.list_machines, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling MachinesApi.list_machines, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/machines'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListMachines200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"MachinesApi.list_machines",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#list_machines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a machine
    # Updates an existing machine. Only the provided fields will be updated.
    # @param machine_id [String] The ID of the machine to update
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateMachineRequest] :update_machine_request 
    # @return [Machine]

    def update_machine(machine_id, opts = {})
      data, _status_code, _headers = update_machine_with_http_info(machine_id, opts)
      data
    end

    # Update a machine
    # Updates an existing machine. Only the provided fields will be updated.
    # @param machine_id [String] The ID of the machine to update
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateMachineRequest] :update_machine_request 
    # @return [Array<(Machine, Integer, Hash)>] Machine data, response status code and response headers
    # PATCH 
    def update_machine_with_http_info(machine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MachinesApi.update_machine ...'
      end
      # verify the required parameter 'machine_id' is set
      if @api_client.config.client_side_validation && machine_id.nil?
        fail ArgumentError, "Missing the required parameter 'machine_id' when calling MachinesApi.update_machine"
      end
      # resource path
      local_var_path = '/machines/{machine_id}'.sub('{' + 'machine_id' + '}', CGI.escape(machine_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_machine_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Machine'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"MachinesApi.update_machine",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MachinesApi#update_machine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
