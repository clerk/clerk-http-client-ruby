=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: 2021-02-05
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: unset

=end

require 'cgi'

module ClerkHttpClient
  class OAuthAccessTokensApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Verify an OAuth Access Token
    # @param verify_oauth_access_token_request [VerifyOAuthAccessTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [VerifyOAuthAccessToken200Response]

    def verify_oauth_access_token(verify_oauth_access_token_request, opts = {})
      data, _status_code, _headers = verify_oauth_access_token_with_http_info(verify_oauth_access_token_request, opts)
      data
    end

    # Verify an OAuth Access Token
    # @param verify_oauth_access_token_request [VerifyOAuthAccessTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VerifyOAuthAccessToken200Response, Integer, Hash)>] VerifyOAuthAccessToken200Response data, response status code and response headers
    # POST 
    def verify_oauth_access_token_with_http_info(verify_oauth_access_token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthAccessTokensApi.verify_oauth_access_token ...'
      end
      # verify the required parameter 'verify_oauth_access_token_request' is set
      if @api_client.config.client_side_validation && verify_oauth_access_token_request.nil?
        fail ArgumentError, "Missing the required parameter 'verify_oauth_access_token_request' when calling OAuthAccessTokensApi.verify_oauth_access_token"
      end
      # resource path
      local_var_path = '/oauth_applications/access_tokens/verify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(verify_oauth_access_token_request)

      # return_type
      return_type = opts[:debug_return_type] || 'VerifyOAuthAccessToken200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OAuthAccessTokensApi.verify_oauth_access_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthAccessTokensApi#verify_oauth_access_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
