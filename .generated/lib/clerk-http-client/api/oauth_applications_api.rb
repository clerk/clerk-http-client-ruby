=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: v1
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: unset

=end

require 'cgi'

module ClerkHttpClient
  class OAuthApplicationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an OAuth application
    # Creates a new OAuth application with the given name and callback URL for an instance. The callback URL must be a valid url. All URL schemes are allowed such as `http://`, `https://`, `myapp://`, etc...
    # @param [Hash] opts the optional parameters
    # @option opts [CreateOAuthApplicationRequest] :create_oauth_application_request 
    # @return [OAuthApplicationWithSecret]

    def create_oauth_application(opts = {})
      data, _status_code, _headers = create_oauth_application_with_http_info(opts)
      data
    end

    # Create an OAuth application
    # Creates a new OAuth application with the given name and callback URL for an instance. The callback URL must be a valid url. All URL schemes are allowed such as &#x60;http://&#x60;, &#x60;https://&#x60;, &#x60;myapp://&#x60;, etc...
    # @param [Hash] opts the optional parameters
    # @option opts [CreateOAuthApplicationRequest] :create_oauth_application_request 
    # @return [Array<(OAuthApplicationWithSecret, Integer, Hash)>] OAuthApplicationWithSecret data, response status code and response headers
    # POST 
    def create_oauth_application_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthApplicationsApi.create_oauth_application ...'
      end
      # resource path
      local_var_path = '/oauth_applications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_oauth_application_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'OAuthApplicationWithSecret'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OAuthApplicationsApi.create_oauth_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApplicationsApi#create_oauth_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an OAuth application
    # Deletes the given OAuth application. This is not reversible.
    # @param oauth_application_id [String] The ID of the OAuth application to delete
    # @param [Hash] opts the optional parameters
    # @return [DeletedObject]

    def delete_oauth_application(oauth_application_id, opts = {})
      data, _status_code, _headers = delete_oauth_application_with_http_info(oauth_application_id, opts)
      data
    end

    # Delete an OAuth application
    # Deletes the given OAuth application. This is not reversible.
    # @param oauth_application_id [String] The ID of the OAuth application to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    # DELETE 
    def delete_oauth_application_with_http_info(oauth_application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthApplicationsApi.delete_oauth_application ...'
      end
      # verify the required parameter 'oauth_application_id' is set
      if @api_client.config.client_side_validation && oauth_application_id.nil?
        fail ArgumentError, "Missing the required parameter 'oauth_application_id' when calling OAuthApplicationsApi.delete_oauth_application"
      end
      # resource path
      local_var_path = '/oauth_applications/{oauth_application_id}'.sub('{' + 'oauth_application_id' + '}', CGI.escape(oauth_application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeletedObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OAuthApplicationsApi.delete_oauth_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApplicationsApi#delete_oauth_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an OAuth application by ID
    # Fetches the OAuth application whose ID matches the provided `id` in the path.
    # @param oauth_application_id [String] The ID of the OAuth application
    # @param [Hash] opts the optional parameters
    # @return [OAuthApplication]

    def get_oauth_application(oauth_application_id, opts = {})
      data, _status_code, _headers = get_oauth_application_with_http_info(oauth_application_id, opts)
      data
    end

    # Retrieve an OAuth application by ID
    # Fetches the OAuth application whose ID matches the provided &#x60;id&#x60; in the path.
    # @param oauth_application_id [String] The ID of the OAuth application
    # @param [Hash] opts the optional parameters
    # @return [Array<(OAuthApplication, Integer, Hash)>] OAuthApplication data, response status code and response headers
    # GET 
    def get_oauth_application_with_http_info(oauth_application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthApplicationsApi.get_oauth_application ...'
      end
      # verify the required parameter 'oauth_application_id' is set
      if @api_client.config.client_side_validation && oauth_application_id.nil?
        fail ArgumentError, "Missing the required parameter 'oauth_application_id' when calling OAuthApplicationsApi.get_oauth_application"
      end
      # resource path
      local_var_path = '/oauth_applications/{oauth_application_id}'.sub('{' + 'oauth_application_id' + '}', CGI.escape(oauth_application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OAuthApplication'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OAuthApplicationsApi.get_oauth_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApplicationsApi#get_oauth_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of OAuth applications for an instance
    # This request returns the list of OAuth applications for an instance. Results can be paginated using the optional `limit` and `offset` query parameters. The OAuth applications are ordered by descending creation date. Most recent OAuth applications will be returned first.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @option opts [Float] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @return [OAuthApplications]

    def list_oauth_applications(opts = {})
      data, _status_code, _headers = list_oauth_applications_with_http_info(opts)
      data
    end

    # Get a list of OAuth applications for an instance
    # This request returns the list of OAuth applications for an instance. Results can be paginated using the optional &#x60;limit&#x60; and &#x60;offset&#x60; query parameters. The OAuth applications are ordered by descending creation date. Most recent OAuth applications will be returned first.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @option opts [Float] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @return [Array<(OAuthApplications, Integer, Hash)>] OAuthApplications data, response status code and response headers
    # GET 
    def list_oauth_applications_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthApplicationsApi.list_oauth_applications ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OAuthApplicationsApi.list_oauth_applications, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OAuthApplicationsApi.list_oauth_applications, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling OAuthApplicationsApi.list_oauth_applications, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/oauth_applications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OAuthApplications'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OAuthApplicationsApi.list_oauth_applications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApplicationsApi#list_oauth_applications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rotate the client secret of the given OAuth application
    # Rotates the OAuth application's client secret. When the client secret is rotated, make sure to update it in authorized OAuth clients.
    # @param oauth_application_id [String] The ID of the OAuth application for which to rotate the client secret
    # @param [Hash] opts the optional parameters
    # @return [OAuthApplicationWithSecret]

    def rotate_oauth_application_secret(oauth_application_id, opts = {})
      data, _status_code, _headers = rotate_oauth_application_secret_with_http_info(oauth_application_id, opts)
      data
    end

    # Rotate the client secret of the given OAuth application
    # Rotates the OAuth application&#39;s client secret. When the client secret is rotated, make sure to update it in authorized OAuth clients.
    # @param oauth_application_id [String] The ID of the OAuth application for which to rotate the client secret
    # @param [Hash] opts the optional parameters
    # @return [Array<(OAuthApplicationWithSecret, Integer, Hash)>] OAuthApplicationWithSecret data, response status code and response headers
    # POST 
    def rotate_oauth_application_secret_with_http_info(oauth_application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthApplicationsApi.rotate_oauth_application_secret ...'
      end
      # verify the required parameter 'oauth_application_id' is set
      if @api_client.config.client_side_validation && oauth_application_id.nil?
        fail ArgumentError, "Missing the required parameter 'oauth_application_id' when calling OAuthApplicationsApi.rotate_oauth_application_secret"
      end
      # resource path
      local_var_path = '/oauth_applications/{oauth_application_id}/rotate_secret'.sub('{' + 'oauth_application_id' + '}', CGI.escape(oauth_application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OAuthApplicationWithSecret'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OAuthApplicationsApi.rotate_oauth_application_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApplicationsApi#rotate_oauth_application_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an OAuth application
    # Updates an existing OAuth application
    # @param oauth_application_id [String] The ID of the OAuth application to update
    # @param update_oauth_application_request [UpdateOAuthApplicationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OAuthApplication]

    def update_oauth_application(oauth_application_id, update_oauth_application_request, opts = {})
      data, _status_code, _headers = update_oauth_application_with_http_info(oauth_application_id, update_oauth_application_request, opts)
      data
    end

    # Update an OAuth application
    # Updates an existing OAuth application
    # @param oauth_application_id [String] The ID of the OAuth application to update
    # @param update_oauth_application_request [UpdateOAuthApplicationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OAuthApplication, Integer, Hash)>] OAuthApplication data, response status code and response headers
    # PATCH 
    def update_oauth_application_with_http_info(oauth_application_id, update_oauth_application_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthApplicationsApi.update_oauth_application ...'
      end
      # verify the required parameter 'oauth_application_id' is set
      if @api_client.config.client_side_validation && oauth_application_id.nil?
        fail ArgumentError, "Missing the required parameter 'oauth_application_id' when calling OAuthApplicationsApi.update_oauth_application"
      end
      # verify the required parameter 'update_oauth_application_request' is set
      if @api_client.config.client_side_validation && update_oauth_application_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_oauth_application_request' when calling OAuthApplicationsApi.update_oauth_application"
      end
      # resource path
      local_var_path = '/oauth_applications/{oauth_application_id}'.sub('{' + 'oauth_application_id' + '}', CGI.escape(oauth_application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_oauth_application_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OAuthApplication'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OAuthApplicationsApi.update_oauth_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApplicationsApi#update_oauth_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
