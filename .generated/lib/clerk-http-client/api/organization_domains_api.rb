=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: 2021-02-05
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: unset

=end

require 'cgi'

module ClerkHttpClient
  class OrganizationDomainsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new organization domain.
    # Creates a new organization domain. By default the domain is verified, but can be optionally set to unverified.
    # @param organization_id [String] The ID of the organization where the new domain will be created.
    # @param create_organization_domain_request [CreateOrganizationDomainRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationDomain]

    def create_organization_domain(organization_id, create_organization_domain_request, opts = {})
      data, _status_code, _headers = create_organization_domain_with_http_info(organization_id, create_organization_domain_request, opts)
      data
    end

    # Create a new organization domain.
    # Creates a new organization domain. By default the domain is verified, but can be optionally set to unverified.
    # @param organization_id [String] The ID of the organization where the new domain will be created.
    # @param create_organization_domain_request [CreateOrganizationDomainRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationDomain, Integer, Hash)>] OrganizationDomain data, response status code and response headers
    # POST 
    def create_organization_domain_with_http_info(organization_id, create_organization_domain_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationDomainsApi.create_organization_domain ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationDomainsApi.create_organization_domain"
      end
      # verify the required parameter 'create_organization_domain_request' is set
      if @api_client.config.client_side_validation && create_organization_domain_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_organization_domain_request' when calling OrganizationDomainsApi.create_organization_domain"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/domains'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_organization_domain_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationDomain'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationDomainsApi.create_organization_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationDomainsApi#create_organization_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a domain from an organization.
    # Removes the given domain from the organization.
    # @param organization_id [String] The ID of the organization the domain belongs to
    # @param domain_id [String] The ID of the domain
    # @param [Hash] opts the optional parameters
    # @return [DeletedObject]

    def delete_organization_domain(organization_id, domain_id, opts = {})
      data, _status_code, _headers = delete_organization_domain_with_http_info(organization_id, domain_id, opts)
      data
    end

    # Remove a domain from an organization.
    # Removes the given domain from the organization.
    # @param organization_id [String] The ID of the organization the domain belongs to
    # @param domain_id [String] The ID of the domain
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    # DELETE 
    def delete_organization_domain_with_http_info(organization_id, domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationDomainsApi.delete_organization_domain ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationDomainsApi.delete_organization_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling OrganizationDomainsApi.delete_organization_domain"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/domains/{domain_id}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeletedObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationDomainsApi.delete_organization_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationDomainsApi#delete_organization_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all organization domains
    # Retrieves a list of all organization domains within the current instance. This endpoint can be used to list all domains across all organizations or filter domains by organization, verification status, enrollment mode, or search query.  The response includes pagination information and details about each domain including its verification status, enrollment mode, and associated counts. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id The ID of the organization to filter domains by
    # @option opts [String] :verified Filter by verification status
    # @option opts [Array<String>] :enrollment_mode Filter by enrollment mode
    # @option opts [String] :query Search domains by name or organization ID. If the query starts with \&quot;org_\&quot;, it will search by exact organization ID match. Otherwise, it performs a case-insensitive partial match on the domain name.  Note: An empty string or whitespace-only value is not allowed and will result in a validation error. 
    # @option opts [String] :order_by Allows to return organization domains in a particular order. At the moment, you can order the returned domains by their &#x60;name&#x60; or &#x60;created_at&#x60;. In order to specify the direction, you can use the &#x60;+/-&#x60; symbols prepended to the property to order by. For example, if you want domains to be returned in descending order according to their &#x60;created_at&#x60; property, you can use &#x60;-created_at&#x60;. If you don&#39;t use &#x60;+&#x60; or &#x60;-&#x60;, then &#x60;+&#x60; is implied. Defaults to &#x60;-created_at&#x60;.  (default to '-created_at')
    # @option opts [Integer] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @option opts [Integer] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @return [OrganizationDomains]

    def list_all_organization_domains(opts = {})
      data, _status_code, _headers = list_all_organization_domains_with_http_info(opts)
      data
    end

    # List all organization domains
    # Retrieves a list of all organization domains within the current instance. This endpoint can be used to list all domains across all organizations or filter domains by organization, verification status, enrollment mode, or search query.  The response includes pagination information and details about each domain including its verification status, enrollment mode, and associated counts. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id The ID of the organization to filter domains by
    # @option opts [String] :verified Filter by verification status
    # @option opts [Array<String>] :enrollment_mode Filter by enrollment mode
    # @option opts [String] :query Search domains by name or organization ID. If the query starts with \&quot;org_\&quot;, it will search by exact organization ID match. Otherwise, it performs a case-insensitive partial match on the domain name.  Note: An empty string or whitespace-only value is not allowed and will result in a validation error. 
    # @option opts [String] :order_by Allows to return organization domains in a particular order. At the moment, you can order the returned domains by their &#x60;name&#x60; or &#x60;created_at&#x60;. In order to specify the direction, you can use the &#x60;+/-&#x60; symbols prepended to the property to order by. For example, if you want domains to be returned in descending order according to their &#x60;created_at&#x60; property, you can use &#x60;-created_at&#x60;. If you don&#39;t use &#x60;+&#x60; or &#x60;-&#x60;, then &#x60;+&#x60; is implied. Defaults to &#x60;-created_at&#x60;.  (default to '-created_at')
    # @option opts [Integer] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @option opts [Integer] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @return [Array<(OrganizationDomains, Integer, Hash)>] OrganizationDomains data, response status code and response headers
    # GET 
    def list_all_organization_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationDomainsApi.list_all_organization_domains ...'
      end
      allowable_values = ["true", "false"]
      if @api_client.config.client_side_validation && opts[:'verified'] && !allowable_values.include?(opts[:'verified'])
        fail ArgumentError, "invalid value for \"verified\", must be one of #{allowable_values}"
      end
      allowable_values = ["manual_invitation", "automatic_invitation", "automatic_suggestion"]
      if @api_client.config.client_side_validation && opts[:'enrollment_mode'] && !opts[:'enrollment_mode'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"enrollment_mode\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling OrganizationDomainsApi.list_all_organization_domains, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrganizationDomainsApi.list_all_organization_domains, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrganizationDomainsApi.list_all_organization_domains, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/organization_domains'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'organization_id'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'verified'] = opts[:'verified'] if !opts[:'verified'].nil?
      query_params[:'enrollment_mode'] = @api_client.build_collection_param(opts[:'enrollment_mode'], :csv) if !opts[:'enrollment_mode'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationDomains'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationDomainsApi.list_all_organization_domains",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationDomainsApi#list_all_organization_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all domains of an organization.
    # Get a list of all domains of an organization.
    # @param organization_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :verified Filter domains by their verification status. &#x60;true&#x60; or &#x60;false&#x60;
    # @option opts [String] :enrollment_mode Filter domains by their enrollment mode
    # @option opts [Integer] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @option opts [Integer] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @return [OrganizationDomains]

    def list_organization_domains(organization_id, opts = {})
      data, _status_code, _headers = list_organization_domains_with_http_info(organization_id, opts)
      data
    end

    # Get a list of all domains of an organization.
    # Get a list of all domains of an organization.
    # @param organization_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :verified Filter domains by their verification status. &#x60;true&#x60; or &#x60;false&#x60;
    # @option opts [String] :enrollment_mode Filter domains by their enrollment mode
    # @option opts [Integer] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @option opts [Integer] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @return [Array<(OrganizationDomains, Integer, Hash)>] OrganizationDomains data, response status code and response headers
    # GET 
    def list_organization_domains_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationDomainsApi.list_organization_domains ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationDomainsApi.list_organization_domains"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrganizationDomainsApi.list_organization_domains, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrganizationDomainsApi.list_organization_domains, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling OrganizationDomainsApi.list_organization_domains, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/organizations/{organization_id}/domains'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'verified'] = opts[:'verified'] if !opts[:'verified'].nil?
      query_params[:'enrollment_mode'] = opts[:'enrollment_mode'] if !opts[:'enrollment_mode'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationDomains'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationDomainsApi.list_organization_domains",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationDomainsApi#list_organization_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an organization domain.
    # Updates the properties of an existing organization domain.
    # @param organization_id [String] The ID of the organization the domain belongs to
    # @param domain_id [String] The ID of the domain
    # @param update_organization_domain_request [UpdateOrganizationDomainRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationDomain]

    def update_organization_domain(organization_id, domain_id, update_organization_domain_request, opts = {})
      data, _status_code, _headers = update_organization_domain_with_http_info(organization_id, domain_id, update_organization_domain_request, opts)
      data
    end

    # Update an organization domain.
    # Updates the properties of an existing organization domain.
    # @param organization_id [String] The ID of the organization the domain belongs to
    # @param domain_id [String] The ID of the domain
    # @param update_organization_domain_request [UpdateOrganizationDomainRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationDomain, Integer, Hash)>] OrganizationDomain data, response status code and response headers
    # PATCH 
    def update_organization_domain_with_http_info(organization_id, domain_id, update_organization_domain_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationDomainsApi.update_organization_domain ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationDomainsApi.update_organization_domain"
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling OrganizationDomainsApi.update_organization_domain"
      end
      # verify the required parameter 'update_organization_domain_request' is set
      if @api_client.config.client_side_validation && update_organization_domain_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_organization_domain_request' when calling OrganizationDomainsApi.update_organization_domain"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/domains/{domain_id}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_organization_domain_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationDomain'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationDomainsApi.update_organization_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationDomainsApi#update_organization_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
