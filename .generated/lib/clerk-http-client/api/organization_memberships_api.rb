=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: 2021-02-05
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: unset

=end

require 'cgi'

module ClerkHttpClient
  class OrganizationMembershipsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new organization membership
    # Adds a user as a member to the given organization. Only users in the same instance as the organization can be added as members.  This organization will be the user's [active organization] (https://clerk.com/docs/organizations/overview#active-organization) the next time they create a session, presuming they don't explicitly set a different organization as active before then.
    # @param organization_id [String] The ID of the organization where the new membership will be created
    # @param create_organization_membership_request [CreateOrganizationMembershipRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationMembership]

    def create_organization_membership(organization_id, create_organization_membership_request, opts = {})
      data, _status_code, _headers = create_organization_membership_with_http_info(organization_id, create_organization_membership_request, opts)
      data
    end

    # Create a new organization membership
    # Adds a user as a member to the given organization. Only users in the same instance as the organization can be added as members.  This organization will be the user&#39;s [active organization] (https://clerk.com/docs/organizations/overview#active-organization) the next time they create a session, presuming they don&#39;t explicitly set a different organization as active before then.
    # @param organization_id [String] The ID of the organization where the new membership will be created
    # @param create_organization_membership_request [CreateOrganizationMembershipRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationMembership, Integer, Hash)>] OrganizationMembership data, response status code and response headers
    # POST 
    def create_organization_membership_with_http_info(organization_id, create_organization_membership_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationMembershipsApi.create_organization_membership ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationMembershipsApi.create_organization_membership"
      end
      # verify the required parameter 'create_organization_membership_request' is set
      if @api_client.config.client_side_validation && create_organization_membership_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_organization_membership_request' when calling OrganizationMembershipsApi.create_organization_membership"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/memberships'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_organization_membership_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationMembership'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationMembershipsApi.create_organization_membership",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationMembershipsApi#create_organization_membership\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a member from an organization
    # Removes the given membership from the organization
    # @param organization_id [String] The ID of the organization the membership belongs to
    # @param user_id [String] The ID of the user that this membership belongs to
    # @param [Hash] opts the optional parameters
    # @return [OrganizationMembership]

    def delete_organization_membership(organization_id, user_id, opts = {})
      data, _status_code, _headers = delete_organization_membership_with_http_info(organization_id, user_id, opts)
      data
    end

    # Remove a member from an organization
    # Removes the given membership from the organization
    # @param organization_id [String] The ID of the organization the membership belongs to
    # @param user_id [String] The ID of the user that this membership belongs to
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationMembership, Integer, Hash)>] OrganizationMembership data, response status code and response headers
    # DELETE 
    def delete_organization_membership_with_http_info(organization_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationMembershipsApi.delete_organization_membership ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationMembershipsApi.delete_organization_membership"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationMembershipsApi.delete_organization_membership"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/memberships/{user_id}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationMembership'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationMembershipsApi.delete_organization_membership",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationMembershipsApi#delete_organization_membership\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all organization memberships within an instance.
    # Retrieves all organization user memberships for the given instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username. By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order.
    # @option opts [Integer] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @option opts [Integer] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @return [OrganizationMemberships]

    def instance_get_organization_memberships(opts = {})
      data, _status_code, _headers = instance_get_organization_memberships_with_http_info(opts)
      data
    end

    # Get a list of all organization memberships within an instance.
    # Retrieves all organization user memberships for the given instance.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username. By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order.
    # @option opts [Integer] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @option opts [Integer] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @return [Array<(OrganizationMemberships, Integer, Hash)>] OrganizationMemberships data, response status code and response headers
    # GET 
    def instance_get_organization_memberships_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationMembershipsApi.instance_get_organization_memberships ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrganizationMembershipsApi.instance_get_organization_memberships, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrganizationMembershipsApi.instance_get_organization_memberships, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling OrganizationMembershipsApi.instance_get_organization_memberships, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/organization_memberships'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationMemberships'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationMembershipsApi.instance_get_organization_memberships",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationMembershipsApi#instance_get_organization_memberships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all members of an organization
    # Retrieves all user memberships for the given organization
    # @param organization_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username. By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order.\&quot;
    # @option opts [Array<String>] :user_id Returns users with the user ids specified. For each user id, the &#x60;+&#x60; and &#x60;-&#x60; can be prepended to the id, which denote whether the respective user id should be included or excluded from the result set. Accepts up to 100 user ids. Any user ids not found are ignored.
    # @option opts [Array<String>] :email_address Returns users with the specified email addresses. Accepts up to 100 email addresses. Any email addresses not found are ignored.
    # @option opts [Array<String>] :phone_number Returns users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.
    # @option opts [Array<String>] :username Returns users with the specified usernames. Accepts up to 100 usernames. Any usernames not found are ignored.
    # @option opts [Array<String>] :web3_wallet Returns users with the specified web3 wallet addresses. Accepts up to 100 web3 wallet addresses. Any web3 wallet addressed not found are ignored.
    # @option opts [Array<String>] :role Returns users with the specified roles. Accepts up to 100 roles. Any roles not found are ignored.
    # @option opts [String] :query Returns users that match the given query. For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names. The query value doesn&#39;t need to match the exact value you are looking for, it is capable of partial matches as well.
    # @option opts [String] :email_address_query Returns users with emails that match the given query, via case-insensitive partial match. For example, &#x60;email_address_query&#x3D;ello&#x60; will match a user with the email &#x60;HELLO@example.com&#x60;.
    # @option opts [String] :phone_number_query Returns users with phone numbers that match the given query, via case-insensitive partial match. For example, &#x60;phone_number_query&#x3D;555&#x60; will match a user with the phone number &#x60;+1555xxxxxxx&#x60;.
    # @option opts [String] :username_query Returns users with usernames that match the given query, via case-insensitive partial match. For example, &#x60;username_query&#x3D;CoolUser&#x60; will match a user with the username &#x60;SomeCoolUser&#x60;.
    # @option opts [String] :name_query Returns users with names that match the given query, via case-insensitive partial match.
    # @option opts [Integer] :last_active_at_before Returns users whose last session activity was before the given date (with millisecond precision). Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
    # @option opts [Integer] :last_active_at_after Returns users whose last session activity was after the given date (with millisecond precision). Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
    # @option opts [Integer] :created_at_before Returns users who have been created before the given date (with millisecond precision). Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
    # @option opts [Integer] :created_at_after Returns users who have been created after the given date (with millisecond precision). Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
    # @option opts [Integer] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @option opts [Integer] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @return [OrganizationMemberships]

    def list_organization_memberships(organization_id, opts = {})
      data, _status_code, _headers = list_organization_memberships_with_http_info(organization_id, opts)
      data
    end

    # Get a list of all members of an organization
    # Retrieves all user memberships for the given organization
    # @param organization_id [String] The organization ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_by Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username. By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order.\&quot;
    # @option opts [Array<String>] :user_id Returns users with the user ids specified. For each user id, the &#x60;+&#x60; and &#x60;-&#x60; can be prepended to the id, which denote whether the respective user id should be included or excluded from the result set. Accepts up to 100 user ids. Any user ids not found are ignored.
    # @option opts [Array<String>] :email_address Returns users with the specified email addresses. Accepts up to 100 email addresses. Any email addresses not found are ignored.
    # @option opts [Array<String>] :phone_number Returns users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.
    # @option opts [Array<String>] :username Returns users with the specified usernames. Accepts up to 100 usernames. Any usernames not found are ignored.
    # @option opts [Array<String>] :web3_wallet Returns users with the specified web3 wallet addresses. Accepts up to 100 web3 wallet addresses. Any web3 wallet addressed not found are ignored.
    # @option opts [Array<String>] :role Returns users with the specified roles. Accepts up to 100 roles. Any roles not found are ignored.
    # @option opts [String] :query Returns users that match the given query. For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names. The query value doesn&#39;t need to match the exact value you are looking for, it is capable of partial matches as well.
    # @option opts [String] :email_address_query Returns users with emails that match the given query, via case-insensitive partial match. For example, &#x60;email_address_query&#x3D;ello&#x60; will match a user with the email &#x60;HELLO@example.com&#x60;.
    # @option opts [String] :phone_number_query Returns users with phone numbers that match the given query, via case-insensitive partial match. For example, &#x60;phone_number_query&#x3D;555&#x60; will match a user with the phone number &#x60;+1555xxxxxxx&#x60;.
    # @option opts [String] :username_query Returns users with usernames that match the given query, via case-insensitive partial match. For example, &#x60;username_query&#x3D;CoolUser&#x60; will match a user with the username &#x60;SomeCoolUser&#x60;.
    # @option opts [String] :name_query Returns users with names that match the given query, via case-insensitive partial match.
    # @option opts [Integer] :last_active_at_before Returns users whose last session activity was before the given date (with millisecond precision). Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
    # @option opts [Integer] :last_active_at_after Returns users whose last session activity was after the given date (with millisecond precision). Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
    # @option opts [Integer] :created_at_before Returns users who have been created before the given date (with millisecond precision). Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
    # @option opts [Integer] :created_at_after Returns users who have been created after the given date (with millisecond precision). Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
    # @option opts [Integer] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @option opts [Integer] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @return [Array<(OrganizationMemberships, Integer, Hash)>] OrganizationMemberships data, response status code and response headers
    # GET 
    def list_organization_memberships_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationMembershipsApi.list_organization_memberships ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationMembershipsApi.list_organization_memberships"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrganizationMembershipsApi.list_organization_memberships, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling OrganizationMembershipsApi.list_organization_memberships, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling OrganizationMembershipsApi.list_organization_memberships, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/organizations/{organization_id}/memberships'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'user_id'] = @api_client.build_collection_param(opts[:'user_id'], :multi) if !opts[:'user_id'].nil?
      query_params[:'email_address'] = @api_client.build_collection_param(opts[:'email_address'], :multi) if !opts[:'email_address'].nil?
      query_params[:'phone_number'] = @api_client.build_collection_param(opts[:'phone_number'], :multi) if !opts[:'phone_number'].nil?
      query_params[:'username'] = @api_client.build_collection_param(opts[:'username'], :multi) if !opts[:'username'].nil?
      query_params[:'web3_wallet'] = @api_client.build_collection_param(opts[:'web3_wallet'], :multi) if !opts[:'web3_wallet'].nil?
      query_params[:'role'] = @api_client.build_collection_param(opts[:'role'], :multi) if !opts[:'role'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'email_address_query'] = opts[:'email_address_query'] if !opts[:'email_address_query'].nil?
      query_params[:'phone_number_query'] = opts[:'phone_number_query'] if !opts[:'phone_number_query'].nil?
      query_params[:'username_query'] = opts[:'username_query'] if !opts[:'username_query'].nil?
      query_params[:'name_query'] = opts[:'name_query'] if !opts[:'name_query'].nil?
      query_params[:'last_active_at_before'] = opts[:'last_active_at_before'] if !opts[:'last_active_at_before'].nil?
      query_params[:'last_active_at_after'] = opts[:'last_active_at_after'] if !opts[:'last_active_at_after'].nil?
      query_params[:'created_at_before'] = opts[:'created_at_before'] if !opts[:'created_at_before'].nil?
      query_params[:'created_at_after'] = opts[:'created_at_after'] if !opts[:'created_at_after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationMemberships'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationMembershipsApi.list_organization_memberships",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationMembershipsApi#list_organization_memberships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an organization membership
    # Updates the properties of an existing organization membership
    # @param organization_id [String] The ID of the organization the membership belongs to
    # @param user_id [String] The ID of the user that this membership belongs to
    # @param update_organization_membership_request [UpdateOrganizationMembershipRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationMembership]

    def update_organization_membership(organization_id, user_id, update_organization_membership_request, opts = {})
      data, _status_code, _headers = update_organization_membership_with_http_info(organization_id, user_id, update_organization_membership_request, opts)
      data
    end

    # Update an organization membership
    # Updates the properties of an existing organization membership
    # @param organization_id [String] The ID of the organization the membership belongs to
    # @param user_id [String] The ID of the user that this membership belongs to
    # @param update_organization_membership_request [UpdateOrganizationMembershipRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationMembership, Integer, Hash)>] OrganizationMembership data, response status code and response headers
    # PATCH 
    def update_organization_membership_with_http_info(organization_id, user_id, update_organization_membership_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationMembershipsApi.update_organization_membership ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationMembershipsApi.update_organization_membership"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationMembershipsApi.update_organization_membership"
      end
      # verify the required parameter 'update_organization_membership_request' is set
      if @api_client.config.client_side_validation && update_organization_membership_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_organization_membership_request' when calling OrganizationMembershipsApi.update_organization_membership"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/memberships/{user_id}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_organization_membership_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationMembership'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationMembershipsApi.update_organization_membership",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationMembershipsApi#update_organization_membership\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Merge and update organization membership metadata
    # Update an organization membership's metadata attributes by merging existing values with the provided parameters. Metadata values will be updated via a deep merge. Deep means that any nested JSON objects will be merged as well. You can remove metadata keys at any level by setting their value to `null`.
    # @param organization_id [String] The ID of the organization the membership belongs to
    # @param user_id [String] The ID of the user that this membership belongs to
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateOrganizationMembershipMetadataRequest] :update_organization_membership_metadata_request 
    # @return [OrganizationMembership]

    def update_organization_membership_metadata(organization_id, user_id, opts = {})
      data, _status_code, _headers = update_organization_membership_metadata_with_http_info(organization_id, user_id, opts)
      data
    end

    # Merge and update organization membership metadata
    # Update an organization membership&#39;s metadata attributes by merging existing values with the provided parameters. Metadata values will be updated via a deep merge. Deep means that any nested JSON objects will be merged as well. You can remove metadata keys at any level by setting their value to &#x60;null&#x60;.
    # @param organization_id [String] The ID of the organization the membership belongs to
    # @param user_id [String] The ID of the user that this membership belongs to
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateOrganizationMembershipMetadataRequest] :update_organization_membership_metadata_request 
    # @return [Array<(OrganizationMembership, Integer, Hash)>] OrganizationMembership data, response status code and response headers
    # PATCH 
    def update_organization_membership_metadata_with_http_info(organization_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationMembershipsApi.update_organization_membership_metadata ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationMembershipsApi.update_organization_membership_metadata"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OrganizationMembershipsApi.update_organization_membership_metadata"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/memberships/{user_id}/metadata'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_organization_membership_metadata_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationMembership'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"OrganizationMembershipsApi.update_organization_membership_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationMembershipsApi#update_organization_membership_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
