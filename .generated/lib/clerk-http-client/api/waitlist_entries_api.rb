=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: v1
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: unset

=end

require 'cgi'

module ClerkHttpClient
  class WaitlistEntriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a waitlist entry
    # Creates a new waitlist entry for the given email address. If the email address is already on the waitlist, no new entry will be created and the existing waitlist entry will be returned.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateWaitlistEntryRequest] :create_waitlist_entry_request 
    # @return [WaitlistEntry]

    def create_waitlist_entry(opts = {})
      data, _status_code, _headers = create_waitlist_entry_with_http_info(opts)
      data
    end

    # Create a waitlist entry
    # Creates a new waitlist entry for the given email address. If the email address is already on the waitlist, no new entry will be created and the existing waitlist entry will be returned.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateWaitlistEntryRequest] :create_waitlist_entry_request 
    # @return [Array<(WaitlistEntry, Integer, Hash)>] WaitlistEntry data, response status code and response headers
    # POST 
    def create_waitlist_entry_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WaitlistEntriesApi.create_waitlist_entry ...'
      end
      # resource path
      local_var_path = '/waitlist_entries'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_waitlist_entry_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'WaitlistEntry'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WaitlistEntriesApi.create_waitlist_entry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WaitlistEntriesApi#create_waitlist_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all waitlist entries
    # Retrieve a list of waitlist entries for the instance. Entries are ordered by creation date in descending order by default. Supports filtering by email address or status and pagination with limit and offset parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @option opts [Float] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @option opts [String] :query Filter waitlist entries by email address
    # @option opts [String] :status Filter waitlist entries by their status
    # @option opts [String] :order_by Specify the order of results. Supported values are: - &#x60;created_at&#x60; - &#x60;email_address&#x60; - &#x60;invited_at&#x60;  Use &#x60;+&#x60; for ascending or &#x60;-&#x60; for descending order. Defaults to &#x60;-created_at&#x60;. (default to '-created_at')
    # @return [ListWaitlistEntries200Response]

    def list_waitlist_entries(opts = {})
      data, _status_code, _headers = list_waitlist_entries_with_http_info(opts)
      data
    end

    # List all waitlist entries
    # Retrieve a list of waitlist entries for the instance. Entries are ordered by creation date in descending order by default. Supports filtering by email address or status and pagination with limit and offset parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;. (default to 10)
    # @option opts [Float] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;. (default to 0)
    # @option opts [String] :query Filter waitlist entries by email address
    # @option opts [String] :status Filter waitlist entries by their status
    # @option opts [String] :order_by Specify the order of results. Supported values are: - &#x60;created_at&#x60; - &#x60;email_address&#x60; - &#x60;invited_at&#x60;  Use &#x60;+&#x60; for ascending or &#x60;-&#x60; for descending order. Defaults to &#x60;-created_at&#x60;. (default to '-created_at')
    # @return [Array<(ListWaitlistEntries200Response, Integer, Hash)>] ListWaitlistEntries200Response data, response status code and response headers
    # GET 
    def list_waitlist_entries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WaitlistEntriesApi.list_waitlist_entries ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling WaitlistEntriesApi.list_waitlist_entries, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling WaitlistEntriesApi.list_waitlist_entries, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling WaitlistEntriesApi.list_waitlist_entries, must be greater than or equal to 0.'
      end

      allowable_values = ["pending", "invited", "completed", "rejected"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/waitlist_entries'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListWaitlistEntries200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"WaitlistEntriesApi.list_waitlist_entries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WaitlistEntriesApi#list_waitlist_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
