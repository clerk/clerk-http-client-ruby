=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: 2021-02-05
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: unset

=end

require 'date'
require 'time'

module ClerkHttpClient
  class CommercePaymentSourceResponse
    # String representing the object's type. Objects of the same type share the same value.
    attr_accessor :object

    # Unique identifier for the payment source.
    attr_accessor :id

    # Unique identifier for the payer.
    attr_accessor :payer_id

    # The payment method type.
    attr_accessor :payment_method

    # Whether this is the default payment source for the payer.
    attr_accessor :is_default

    # The payment gateway.
    attr_accessor :gateway

    # External ID in the payment gateway.
    attr_accessor :gateway_external_id

    # External account ID in the payment gateway.
    attr_accessor :gateway_external_account_id

    # Last 4 digits of the card (for card payment sources).
    attr_accessor :last4

    # Status of the payment source.
    attr_accessor :status

    # Type of wallet (if applicable).
    attr_accessor :wallet_type

    # Type of card (if applicable).
    attr_accessor :card_type

    # Card expiration year (for card payment sources).
    attr_accessor :expiry_year

    # Card expiration month (for card payment sources).
    attr_accessor :expiry_month

    # Unix timestamp (in milliseconds) when the payment source was created.
    attr_accessor :created_at

    # Unix timestamp (in milliseconds) when the payment source was last updated.
    attr_accessor :updated_at

    # Whether this payment source can be removed.
    attr_accessor :is_removable

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'object' => :'object',
        :'id' => :'id',
        :'payer_id' => :'payer_id',
        :'payment_method' => :'payment_method',
        :'is_default' => :'is_default',
        :'gateway' => :'gateway',
        :'gateway_external_id' => :'gateway_external_id',
        :'gateway_external_account_id' => :'gateway_external_account_id',
        :'last4' => :'last4',
        :'status' => :'status',
        :'wallet_type' => :'wallet_type',
        :'card_type' => :'card_type',
        :'expiry_year' => :'expiry_year',
        :'expiry_month' => :'expiry_month',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'is_removable' => :'is_removable'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'object' => :'String',
        :'id' => :'String',
        :'payer_id' => :'String',
        :'payment_method' => :'String',
        :'is_default' => :'Boolean',
        :'gateway' => :'String',
        :'gateway_external_id' => :'String',
        :'gateway_external_account_id' => :'String',
        :'last4' => :'String',
        :'status' => :'String',
        :'wallet_type' => :'String',
        :'card_type' => :'String',
        :'expiry_year' => :'Integer',
        :'expiry_month' => :'Integer',
        :'created_at' => :'Integer',
        :'updated_at' => :'Integer',
        :'is_removable' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'is_default',
        :'gateway_external_account_id',
        :'is_removable'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ClerkHttpClient::CommercePaymentSourceResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ClerkHttpClient::CommercePaymentSourceResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'object')
        self.object = attributes[:'object']
      else
        self.object = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'payer_id')
        self.payer_id = attributes[:'payer_id']
      else
        self.payer_id = nil
      end

      if attributes.key?(:'payment_method')
        self.payment_method = attributes[:'payment_method']
      else
        self.payment_method = nil
      end

      if attributes.key?(:'is_default')
        self.is_default = attributes[:'is_default']
      end

      if attributes.key?(:'gateway')
        self.gateway = attributes[:'gateway']
      else
        self.gateway = nil
      end

      if attributes.key?(:'gateway_external_id')
        self.gateway_external_id = attributes[:'gateway_external_id']
      else
        self.gateway_external_id = nil
      end

      if attributes.key?(:'gateway_external_account_id')
        self.gateway_external_account_id = attributes[:'gateway_external_account_id']
      end

      if attributes.key?(:'last4')
        self.last4 = attributes[:'last4']
      else
        self.last4 = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'wallet_type')
        self.wallet_type = attributes[:'wallet_type']
      else
        self.wallet_type = nil
      end

      if attributes.key?(:'card_type')
        self.card_type = attributes[:'card_type']
      else
        self.card_type = nil
      end

      if attributes.key?(:'expiry_year')
        self.expiry_year = attributes[:'expiry_year']
      end

      if attributes.key?(:'expiry_month')
        self.expiry_month = attributes[:'expiry_month']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'is_removable')
        self.is_removable = attributes[:'is_removable']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @object.nil?
        invalid_properties.push('invalid value for "object", object cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @payer_id.nil?
        invalid_properties.push('invalid value for "payer_id", payer_id cannot be nil.')
      end

      if @payment_method.nil?
        invalid_properties.push('invalid value for "payment_method", payment_method cannot be nil.')
      end

      if @gateway.nil?
        invalid_properties.push('invalid value for "gateway", gateway cannot be nil.')
      end

      if @gateway_external_id.nil?
        invalid_properties.push('invalid value for "gateway_external_id", gateway_external_id cannot be nil.')
      end

      if @last4.nil?
        invalid_properties.push('invalid value for "last4", last4 cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @wallet_type.nil?
        invalid_properties.push('invalid value for "wallet_type", wallet_type cannot be nil.')
      end

      if @card_type.nil?
        invalid_properties.push('invalid value for "card_type", card_type cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @object.nil?
      object_validator = EnumAttributeValidator.new('String', ["commerce_source"])
      return false unless object_validator.valid?(@object)
      return false if @id.nil?
      return false if @payer_id.nil?
      return false if @payment_method.nil?
      payment_method_validator = EnumAttributeValidator.new('String', ["card", "apple_pay", "google_pay"])
      return false unless payment_method_validator.valid?(@payment_method)
      return false if @gateway.nil?
      return false if @gateway_external_id.nil?
      return false if @last4.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["active", "disconnected"])
      return false unless status_validator.valid?(@status)
      return false if @wallet_type.nil?
      return false if @card_type.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new('String', ["commerce_source"])
      unless validator.valid?(object)
        fail ArgumentError, "invalid value for \"object\", must be one of #{validator.allowable_values}."
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method Object to be assigned
    def payment_method=(payment_method)
      validator = EnumAttributeValidator.new('String', ["card", "apple_pay", "google_pay"])
      unless validator.valid?(payment_method)
        fail ArgumentError, "invalid value for \"payment_method\", must be one of #{validator.allowable_values}."
      end
      @payment_method = payment_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["active", "disconnected"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          object == o.object &&
          id == o.id &&
          payer_id == o.payer_id &&
          payment_method == o.payment_method &&
          is_default == o.is_default &&
          gateway == o.gateway &&
          gateway_external_id == o.gateway_external_id &&
          gateway_external_account_id == o.gateway_external_account_id &&
          last4 == o.last4 &&
          status == o.status &&
          wallet_type == o.wallet_type &&
          card_type == o.card_type &&
          expiry_year == o.expiry_year &&
          expiry_month == o.expiry_month &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          is_removable == o.is_removable
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [object, id, payer_id, payment_method, is_default, gateway, gateway_external_id, gateway_external_account_id, last4, status, wallet_type, card_type, expiry_year, expiry_month, created_at, updated_at, is_removable].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ClerkHttpClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
