=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: 2021-02-05
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: unset

=end

require 'date'
require 'time'

module ClerkHttpClient
  class CommercePlan
    # String representing the object's type. Objects of the same type share the same value.
    attr_accessor :object

    # Unique identifier for the commerce plan.
    attr_accessor :id

    # The name of the commerce plan.
    attr_accessor :name

    attr_accessor :fee

    attr_accessor :annual_monthly_fee

    attr_accessor :annual_fee

    # The amount in cents for the plan.
    attr_accessor :amount

    # The formatted amount as a string (e.g., \"$49.99\").
    attr_accessor :amount_formatted

    # The monthly amount in cents when billed annually.
    attr_accessor :annual_monthly_amount

    # The formatted annual monthly amount as a string.
    attr_accessor :annual_monthly_amount_formatted

    # The total annual amount in cents.
    attr_accessor :annual_amount

    # The formatted annual amount as a string.
    attr_accessor :annual_amount_formatted

    # The currency symbol (e.g., \"$\").
    attr_accessor :currency_symbol

    # The currency code (e.g., \"USD\").
    attr_accessor :currency

    # The description of the commerce plan.
    attr_accessor :description

    # The ID of the product this plan belongs to.
    attr_accessor :product_id

    # Whether this is the default plan.
    attr_accessor :is_default

    # Whether this is a recurring plan.
    attr_accessor :is_recurring

    # Whether this plan is publicly visible.
    attr_accessor :publicly_visible

    # Whether this plan has a base fee.
    attr_accessor :has_base_fee

    # The types of payers that can use this plan.
    attr_accessor :payer_type

    # The payer type this plan is designed for.
    attr_accessor :for_payer_type

    # The URL-friendly slug for the plan.
    attr_accessor :slug

    # The URL of the plan's avatar image.
    attr_accessor :avatar_url

    # The billing period for the plan.
    attr_accessor :period

    # The billing interval.
    attr_accessor :interval

    # The features included in this plan.
    attr_accessor :features

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'object' => :'object',
        :'id' => :'id',
        :'name' => :'name',
        :'fee' => :'fee',
        :'annual_monthly_fee' => :'annual_monthly_fee',
        :'annual_fee' => :'annual_fee',
        :'amount' => :'amount',
        :'amount_formatted' => :'amount_formatted',
        :'annual_monthly_amount' => :'annual_monthly_amount',
        :'annual_monthly_amount_formatted' => :'annual_monthly_amount_formatted',
        :'annual_amount' => :'annual_amount',
        :'annual_amount_formatted' => :'annual_amount_formatted',
        :'currency_symbol' => :'currency_symbol',
        :'currency' => :'currency',
        :'description' => :'description',
        :'product_id' => :'product_id',
        :'is_default' => :'is_default',
        :'is_recurring' => :'is_recurring',
        :'publicly_visible' => :'publicly_visible',
        :'has_base_fee' => :'has_base_fee',
        :'payer_type' => :'payer_type',
        :'for_payer_type' => :'for_payer_type',
        :'slug' => :'slug',
        :'avatar_url' => :'avatar_url',
        :'period' => :'period',
        :'interval' => :'interval',
        :'features' => :'features'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'object' => :'String',
        :'id' => :'String',
        :'name' => :'String',
        :'fee' => :'CommerceMoneyResponse',
        :'annual_monthly_fee' => :'CommerceMoneyResponse',
        :'annual_fee' => :'CommerceMoneyResponse',
        :'amount' => :'Integer',
        :'amount_formatted' => :'String',
        :'annual_monthly_amount' => :'Integer',
        :'annual_monthly_amount_formatted' => :'String',
        :'annual_amount' => :'Integer',
        :'annual_amount_formatted' => :'String',
        :'currency_symbol' => :'String',
        :'currency' => :'String',
        :'description' => :'String',
        :'product_id' => :'String',
        :'is_default' => :'Boolean',
        :'is_recurring' => :'Boolean',
        :'publicly_visible' => :'Boolean',
        :'has_base_fee' => :'Boolean',
        :'payer_type' => :'Array<String>',
        :'for_payer_type' => :'String',
        :'slug' => :'String',
        :'avatar_url' => :'String',
        :'period' => :'String',
        :'interval' => :'Integer',
        :'features' => :'Array<FeatureResponse>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ClerkHttpClient::CommercePlan` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ClerkHttpClient::CommercePlan`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'object')
        self.object = attributes[:'object']
      else
        self.object = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'fee')
        self.fee = attributes[:'fee']
      else
        self.fee = nil
      end

      if attributes.key?(:'annual_monthly_fee')
        self.annual_monthly_fee = attributes[:'annual_monthly_fee']
      else
        self.annual_monthly_fee = nil
      end

      if attributes.key?(:'annual_fee')
        self.annual_fee = attributes[:'annual_fee']
      else
        self.annual_fee = nil
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      else
        self.amount = nil
      end

      if attributes.key?(:'amount_formatted')
        self.amount_formatted = attributes[:'amount_formatted']
      else
        self.amount_formatted = nil
      end

      if attributes.key?(:'annual_monthly_amount')
        self.annual_monthly_amount = attributes[:'annual_monthly_amount']
      else
        self.annual_monthly_amount = nil
      end

      if attributes.key?(:'annual_monthly_amount_formatted')
        self.annual_monthly_amount_formatted = attributes[:'annual_monthly_amount_formatted']
      else
        self.annual_monthly_amount_formatted = nil
      end

      if attributes.key?(:'annual_amount')
        self.annual_amount = attributes[:'annual_amount']
      else
        self.annual_amount = nil
      end

      if attributes.key?(:'annual_amount_formatted')
        self.annual_amount_formatted = attributes[:'annual_amount_formatted']
      else
        self.annual_amount_formatted = nil
      end

      if attributes.key?(:'currency_symbol')
        self.currency_symbol = attributes[:'currency_symbol']
      else
        self.currency_symbol = nil
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      else
        self.currency = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      else
        self.description = nil
      end

      if attributes.key?(:'product_id')
        self.product_id = attributes[:'product_id']
      else
        self.product_id = nil
      end

      if attributes.key?(:'is_default')
        self.is_default = attributes[:'is_default']
      else
        self.is_default = nil
      end

      if attributes.key?(:'is_recurring')
        self.is_recurring = attributes[:'is_recurring']
      else
        self.is_recurring = nil
      end

      if attributes.key?(:'publicly_visible')
        self.publicly_visible = attributes[:'publicly_visible']
      else
        self.publicly_visible = nil
      end

      if attributes.key?(:'has_base_fee')
        self.has_base_fee = attributes[:'has_base_fee']
      else
        self.has_base_fee = nil
      end

      if attributes.key?(:'payer_type')
        if (value = attributes[:'payer_type']).is_a?(Array)
          self.payer_type = value
        end
      else
        self.payer_type = nil
      end

      if attributes.key?(:'for_payer_type')
        self.for_payer_type = attributes[:'for_payer_type']
      else
        self.for_payer_type = nil
      end

      if attributes.key?(:'slug')
        self.slug = attributes[:'slug']
      else
        self.slug = nil
      end

      if attributes.key?(:'avatar_url')
        self.avatar_url = attributes[:'avatar_url']
      else
        self.avatar_url = nil
      end

      if attributes.key?(:'period')
        self.period = attributes[:'period']
      end

      if attributes.key?(:'interval')
        self.interval = attributes[:'interval']
      end

      if attributes.key?(:'features')
        if (value = attributes[:'features']).is_a?(Array)
          self.features = value
        end
      else
        self.features = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @object.nil?
        invalid_properties.push('invalid value for "object", object cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @fee.nil?
        invalid_properties.push('invalid value for "fee", fee cannot be nil.')
      end

      if @annual_monthly_fee.nil?
        invalid_properties.push('invalid value for "annual_monthly_fee", annual_monthly_fee cannot be nil.')
      end

      if @annual_fee.nil?
        invalid_properties.push('invalid value for "annual_fee", annual_fee cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @amount_formatted.nil?
        invalid_properties.push('invalid value for "amount_formatted", amount_formatted cannot be nil.')
      end

      if @annual_monthly_amount.nil?
        invalid_properties.push('invalid value for "annual_monthly_amount", annual_monthly_amount cannot be nil.')
      end

      if @annual_monthly_amount_formatted.nil?
        invalid_properties.push('invalid value for "annual_monthly_amount_formatted", annual_monthly_amount_formatted cannot be nil.')
      end

      if @annual_amount.nil?
        invalid_properties.push('invalid value for "annual_amount", annual_amount cannot be nil.')
      end

      if @annual_amount_formatted.nil?
        invalid_properties.push('invalid value for "annual_amount_formatted", annual_amount_formatted cannot be nil.')
      end

      if @currency_symbol.nil?
        invalid_properties.push('invalid value for "currency_symbol", currency_symbol cannot be nil.')
      end

      if @currency.nil?
        invalid_properties.push('invalid value for "currency", currency cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @product_id.nil?
        invalid_properties.push('invalid value for "product_id", product_id cannot be nil.')
      end

      if @is_default.nil?
        invalid_properties.push('invalid value for "is_default", is_default cannot be nil.')
      end

      if @is_recurring.nil?
        invalid_properties.push('invalid value for "is_recurring", is_recurring cannot be nil.')
      end

      if @publicly_visible.nil?
        invalid_properties.push('invalid value for "publicly_visible", publicly_visible cannot be nil.')
      end

      if @has_base_fee.nil?
        invalid_properties.push('invalid value for "has_base_fee", has_base_fee cannot be nil.')
      end

      if @payer_type.nil?
        invalid_properties.push('invalid value for "payer_type", payer_type cannot be nil.')
      end

      if @for_payer_type.nil?
        invalid_properties.push('invalid value for "for_payer_type", for_payer_type cannot be nil.')
      end

      if @slug.nil?
        invalid_properties.push('invalid value for "slug", slug cannot be nil.')
      end

      if @avatar_url.nil?
        invalid_properties.push('invalid value for "avatar_url", avatar_url cannot be nil.')
      end

      if @features.nil?
        invalid_properties.push('invalid value for "features", features cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @object.nil?
      object_validator = EnumAttributeValidator.new('String', ["commerce_plan"])
      return false unless object_validator.valid?(@object)
      return false if @id.nil?
      return false if @name.nil?
      return false if @fee.nil?
      return false if @annual_monthly_fee.nil?
      return false if @annual_fee.nil?
      return false if @amount.nil?
      return false if @amount_formatted.nil?
      return false if @annual_monthly_amount.nil?
      return false if @annual_monthly_amount_formatted.nil?
      return false if @annual_amount.nil?
      return false if @annual_amount_formatted.nil?
      return false if @currency_symbol.nil?
      return false if @currency.nil?
      return false if @description.nil?
      return false if @product_id.nil?
      return false if @is_default.nil?
      return false if @is_recurring.nil?
      return false if @publicly_visible.nil?
      return false if @has_base_fee.nil?
      return false if @payer_type.nil?
      return false if @for_payer_type.nil?
      return false if @slug.nil?
      return false if @avatar_url.nil?
      return false if @features.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new('String', ["commerce_plan"])
      unless validator.valid?(object)
        fail ArgumentError, "invalid value for \"object\", must be one of #{validator.allowable_values}."
      end
      @object = object
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          object == o.object &&
          id == o.id &&
          name == o.name &&
          fee == o.fee &&
          annual_monthly_fee == o.annual_monthly_fee &&
          annual_fee == o.annual_fee &&
          amount == o.amount &&
          amount_formatted == o.amount_formatted &&
          annual_monthly_amount == o.annual_monthly_amount &&
          annual_monthly_amount_formatted == o.annual_monthly_amount_formatted &&
          annual_amount == o.annual_amount &&
          annual_amount_formatted == o.annual_amount_formatted &&
          currency_symbol == o.currency_symbol &&
          currency == o.currency &&
          description == o.description &&
          product_id == o.product_id &&
          is_default == o.is_default &&
          is_recurring == o.is_recurring &&
          publicly_visible == o.publicly_visible &&
          has_base_fee == o.has_base_fee &&
          payer_type == o.payer_type &&
          for_payer_type == o.for_payer_type &&
          slug == o.slug &&
          avatar_url == o.avatar_url &&
          period == o.period &&
          interval == o.interval &&
          features == o.features
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [object, id, name, fee, annual_monthly_fee, annual_fee, amount, amount_formatted, annual_monthly_amount, annual_monthly_amount_formatted, annual_amount, annual_amount_formatted, currency_symbol, currency, description, product_id, is_default, is_recurring, publicly_visible, has_base_fee, payer_type, for_payer_type, slug, avatar_url, period, interval, features].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ClerkHttpClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
