=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: 2021-02-05
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: unset

=end

require 'date'
require 'time'

module ClerkHttpClient
  class CommerceSubscriptionItem
    # String representing the object's type. Objects of the same type share the same value.
    attr_accessor :object

    # Unique identifier for the subscription item.
    attr_accessor :id

    # Unique identifier for the Clerk instance.
    attr_accessor :instance_id

    # Current status of the subscription item.
    attr_accessor :status

    # Credit information (only available in PaymentAttempt events).
    attr_accessor :credit

    # Unique identifier for the associated plan.
    attr_accessor :plan_id

    # The associated commerce plan.
    attr_accessor :plan

    # The billing period for this subscription.
    attr_accessor :plan_period

    # Unique identifier for the payment source.
    attr_accessor :payment_source_id

    # The payment source associated with this subscription.
    attr_accessor :payment_source

    # Total amount paid over the lifetime of this subscription.
    attr_accessor :lifetime_paid

    # Current amount for this subscription.
    attr_accessor :amount

    # Information about the next invoice.
    attr_accessor :next_invoice

    # Information about the next payment.
    attr_accessor :next_payment

    # Unique identifier for the payer.
    attr_accessor :payer_id

    # The payer associated with this subscription.
    attr_accessor :payer

    # Whether this subscription is currently on a free trial.
    attr_accessor :is_free_trial

    # Unix timestamp (in milliseconds) when the current period started.
    attr_accessor :period_start

    # Unix timestamp (in milliseconds) when the current period ends.
    attr_accessor :period_end

    # Date used for proration calculations.
    attr_accessor :proration_date

    # Unix timestamp (in milliseconds) when the subscription was canceled.
    attr_accessor :canceled_at

    # Unix timestamp (in milliseconds) when the subscription became past due.
    attr_accessor :past_due_at

    # Unix timestamp (in milliseconds) when the subscription ended.
    attr_accessor :ended_at

    # Unix timestamp (in milliseconds) when the subscription was created.
    attr_accessor :created_at

    # Unix timestamp (in milliseconds) when the subscription was last updated.
    attr_accessor :updated_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'object' => :'object',
        :'id' => :'id',
        :'instance_id' => :'instance_id',
        :'status' => :'status',
        :'credit' => :'credit',
        :'plan_id' => :'plan_id',
        :'plan' => :'plan',
        :'plan_period' => :'plan_period',
        :'payment_source_id' => :'payment_source_id',
        :'payment_source' => :'payment_source',
        :'lifetime_paid' => :'lifetime_paid',
        :'amount' => :'amount',
        :'next_invoice' => :'next_invoice',
        :'next_payment' => :'next_payment',
        :'payer_id' => :'payer_id',
        :'payer' => :'payer',
        :'is_free_trial' => :'is_free_trial',
        :'period_start' => :'period_start',
        :'period_end' => :'period_end',
        :'proration_date' => :'proration_date',
        :'canceled_at' => :'canceled_at',
        :'past_due_at' => :'past_due_at',
        :'ended_at' => :'ended_at',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'object' => :'String',
        :'id' => :'String',
        :'instance_id' => :'String',
        :'status' => :'String',
        :'credit' => :'CommerceSubscriptionCreditResponse',
        :'plan_id' => :'String',
        :'plan' => :'CommercePlan',
        :'plan_period' => :'String',
        :'payment_source_id' => :'String',
        :'payment_source' => :'CommercePaymentSourceResponse',
        :'lifetime_paid' => :'CommerceMoneyResponse',
        :'amount' => :'CommerceMoneyResponse',
        :'next_invoice' => :'CommerceSubscriptionItemNextPaymentResponse',
        :'next_payment' => :'CommerceSubscriptionItemNextPaymentResponse',
        :'payer_id' => :'String',
        :'payer' => :'CommercePayerResponse',
        :'is_free_trial' => :'Boolean',
        :'period_start' => :'Integer',
        :'period_end' => :'Integer',
        :'proration_date' => :'String',
        :'canceled_at' => :'Integer',
        :'past_due_at' => :'Integer',
        :'ended_at' => :'Integer',
        :'created_at' => :'Integer',
        :'updated_at' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'credit',
        :'plan',
        :'payment_source',
        :'lifetime_paid',
        :'amount',
        :'next_invoice',
        :'next_payment',
        :'payer',
        :'period_start',
        :'period_end',
        :'canceled_at',
        :'past_due_at',
        :'ended_at',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ClerkHttpClient::CommerceSubscriptionItem` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ClerkHttpClient::CommerceSubscriptionItem`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'object')
        self.object = attributes[:'object']
      else
        self.object = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'instance_id')
        self.instance_id = attributes[:'instance_id']
      else
        self.instance_id = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'credit')
        self.credit = attributes[:'credit']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      else
        self.plan_id = nil
      end

      if attributes.key?(:'plan')
        self.plan = attributes[:'plan']
      else
        self.plan = nil
      end

      if attributes.key?(:'plan_period')
        self.plan_period = attributes[:'plan_period']
      else
        self.plan_period = nil
      end

      if attributes.key?(:'payment_source_id')
        self.payment_source_id = attributes[:'payment_source_id']
      else
        self.payment_source_id = nil
      end

      if attributes.key?(:'payment_source')
        self.payment_source = attributes[:'payment_source']
      end

      if attributes.key?(:'lifetime_paid')
        self.lifetime_paid = attributes[:'lifetime_paid']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'next_invoice')
        self.next_invoice = attributes[:'next_invoice']
      end

      if attributes.key?(:'next_payment')
        self.next_payment = attributes[:'next_payment']
      end

      if attributes.key?(:'payer_id')
        self.payer_id = attributes[:'payer_id']
      else
        self.payer_id = nil
      end

      if attributes.key?(:'payer')
        self.payer = attributes[:'payer']
      end

      if attributes.key?(:'is_free_trial')
        self.is_free_trial = attributes[:'is_free_trial']
      else
        self.is_free_trial = nil
      end

      if attributes.key?(:'period_start')
        self.period_start = attributes[:'period_start']
      end

      if attributes.key?(:'period_end')
        self.period_end = attributes[:'period_end']
      end

      if attributes.key?(:'proration_date')
        self.proration_date = attributes[:'proration_date']
      else
        self.proration_date = nil
      end

      if attributes.key?(:'canceled_at')
        self.canceled_at = attributes[:'canceled_at']
      end

      if attributes.key?(:'past_due_at')
        self.past_due_at = attributes[:'past_due_at']
      end

      if attributes.key?(:'ended_at')
        self.ended_at = attributes[:'ended_at']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @object.nil?
        invalid_properties.push('invalid value for "object", object cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @instance_id.nil?
        invalid_properties.push('invalid value for "instance_id", instance_id cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @plan_id.nil?
        invalid_properties.push('invalid value for "plan_id", plan_id cannot be nil.')
      end

      if @plan_period.nil?
        invalid_properties.push('invalid value for "plan_period", plan_period cannot be nil.')
      end

      if @payment_source_id.nil?
        invalid_properties.push('invalid value for "payment_source_id", payment_source_id cannot be nil.')
      end

      if @payer_id.nil?
        invalid_properties.push('invalid value for "payer_id", payer_id cannot be nil.')
      end

      if @is_free_trial.nil?
        invalid_properties.push('invalid value for "is_free_trial", is_free_trial cannot be nil.')
      end

      if @proration_date.nil?
        invalid_properties.push('invalid value for "proration_date", proration_date cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @object.nil?
      object_validator = EnumAttributeValidator.new('String', ["commerce_subscription_item"])
      return false unless object_validator.valid?(@object)
      return false if @id.nil?
      return false if @instance_id.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["active", "ended", "past_due", "upcoming", "incomplete", "abandoned"])
      return false unless status_validator.valid?(@status)
      return false if @plan_id.nil?
      return false if @plan_period.nil?
      plan_period_validator = EnumAttributeValidator.new('String', ["month", "annual"])
      return false unless plan_period_validator.valid?(@plan_period)
      return false if @payment_source_id.nil?
      return false if @payer_id.nil?
      return false if @is_free_trial.nil?
      return false if @proration_date.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new('String', ["commerce_subscription_item"])
      unless validator.valid?(object)
        fail ArgumentError, "invalid value for \"object\", must be one of #{validator.allowable_values}."
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["active", "ended", "past_due", "upcoming", "incomplete", "abandoned"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] plan_period Object to be assigned
    def plan_period=(plan_period)
      validator = EnumAttributeValidator.new('String', ["month", "annual"])
      unless validator.valid?(plan_period)
        fail ArgumentError, "invalid value for \"plan_period\", must be one of #{validator.allowable_values}."
      end
      @plan_period = plan_period
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          object == o.object &&
          id == o.id &&
          instance_id == o.instance_id &&
          status == o.status &&
          credit == o.credit &&
          plan_id == o.plan_id &&
          plan == o.plan &&
          plan_period == o.plan_period &&
          payment_source_id == o.payment_source_id &&
          payment_source == o.payment_source &&
          lifetime_paid == o.lifetime_paid &&
          amount == o.amount &&
          next_invoice == o.next_invoice &&
          next_payment == o.next_payment &&
          payer_id == o.payer_id &&
          payer == o.payer &&
          is_free_trial == o.is_free_trial &&
          period_start == o.period_start &&
          period_end == o.period_end &&
          proration_date == o.proration_date &&
          canceled_at == o.canceled_at &&
          past_due_at == o.past_due_at &&
          ended_at == o.ended_at &&
          created_at == o.created_at &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [object, id, instance_id, status, credit, plan_id, plan, plan_period, payment_source_id, payment_source, lifetime_paid, amount, next_invoice, next_payment, payer_id, payer, is_free_trial, period_start, period_end, proration_date, canceled_at, past_due_at, ended_at, created_at, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ClerkHttpClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
