=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: v1
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'spec_helper'
require 'json'

# Unit tests for ClerkHttpClient::EmailSMSTemplatesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'EmailSMSTemplatesApi' do
  before do
    # run before each test
    @api_instance = ClerkHttpClient::EmailSMSTemplatesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EmailSMSTemplatesApi' do
    it 'should create an instance of EmailSMSTemplatesApi' do
      expect(@api_instance).to be_instance_of(ClerkHttpClient::EmailSMSTemplatesApi)
    end
  end

  # unit tests for get_template
  # Retrieve a template
  # Returns the details of a template
  # @param template_type The type of templates to retrieve (email or SMS)
  # @param slug The slug (i.e. machine-friendly name) of the template to retrieve
  # @param [Hash] opts the optional parameters
  # @return [Template]
  describe 'get_template test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_template_list
  # List all templates
  # Returns a list of all templates. The templates are returned sorted by position.
  # @param template_type The type of templates to list (email or SMS)
  # @param [Hash] opts the optional parameters
  # @return [Array<Template>]
  describe 'get_template_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for preview_template
  # Preview changes to a template
  # Returns a preview of a template for a given template_type, slug and body
  # @param template_type The type of template to preview
  # @param slug The slug of the template to preview
  # @param [Hash] opts the optional parameters
  # @option opts [PreviewTemplateRequest] :preview_template_request Required parameters
  # @return [Object]
  describe 'preview_template test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for revert_template
  # Revert a template
  # Reverts an updated template to its default state
  # @param template_type The type of template to revert
  # @param slug The slug of the template to revert
  # @param [Hash] opts the optional parameters
  # @return [Template]
  describe 'revert_template test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for toggle_template_delivery
  # Toggle the delivery by Clerk for a template of a given type and slug
  # Toggles the delivery by Clerk for a template of a given type and slug. If disabled, Clerk will not deliver the resulting email or SMS. The app developer will need to listen to the &#x60;email.created&#x60; or &#x60;sms.created&#x60; webhooks in order to handle delivery themselves.
  # @param template_type The type of template to toggle delivery for
  # @param slug The slug of the template for which to toggle delivery
  # @param [Hash] opts the optional parameters
  # @option opts [ToggleTemplateDeliveryRequest] :toggle_template_delivery_request 
  # @return [Template]
  describe 'toggle_template_delivery test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for upsert_template
  # Update a template for a given type and slug
  # Updates the existing template of the given type and slug
  # @param template_type The type of template to update
  # @param slug The slug of the template to update
  # @param [Hash] opts the optional parameters
  # @option opts [UpsertTemplateRequest] :upsert_template_request 
  # @return [Template]
  describe 'upsert_template test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
