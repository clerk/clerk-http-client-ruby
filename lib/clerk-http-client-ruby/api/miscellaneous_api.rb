=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: v1
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module ClerkHttpClient
  class MiscellaneousApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns the markup for the interstitial page
    # The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user's authentication state. It is used by Clerk SDKs when the user's authentication state cannot be immediately determined.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :frontend_api The Frontend API key of your instance
    # @option opts [String] :publishable_key The publishable key of your instance
    # @return [nil]

    def get_interstitial(opts = {})
      get_interstitial_with_http_info(opts)
      nil
    end

    # Returns the markup for the interstitial page
    # The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user&#39;s authentication state. It is used by Clerk SDKs when the user&#39;s authentication state cannot be immediately determined.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :frontend_api The Frontend API key of your instance
    # @option opts [String] :publishable_key The publishable key of your instance
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    # GET 
    def get_interstitial_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MiscellaneousApi.get_public_interstitial ...'
      end
      # resource path
      local_var_path = '/public/interstitial'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'frontendApi'] = opts[:'frontend_api'] if !opts[:'frontend_api'].nil?
      query_params[:'publishable_key'] = opts[:'publishable_key'] if !opts[:'publishable_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MiscellaneousApi.get_public_interstitial",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MiscellaneousApi#get_public_interstitial\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
