=begin
#Clerk Backend API

#The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

The version of the OpenAPI document: v1
Contact: support@clerk.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0-SNAPSHOT

=end

require 'cgi'

module ClerkBackend
  class DomainsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a domain
    # Add a new domain for your instance. Useful in the case of multi-domain instances, allows adding satellite domains to an instance. The new domain must have a `name`. The domain name can contain the port for development instances, like `localhost:3000`. At the moment, instances can have only one primary domain, so the `is_satellite` parameter must be set to `true`. If you're planning to configure the new satellite domain to run behind a proxy, pass the `proxy_url` parameter accordingly.
    # @param [Hash] opts the optional parameters
    # @option opts [AddDomainRequest] :add_domain_request 
    # @return [Domain]

    def create(opts = {})
      data, _status_code, _headers = create_with_http_info(opts)
      data
    end

    # Add a domain
    # Add a new domain for your instance. Useful in the case of multi-domain instances, allows adding satellite domains to an instance. The new domain must have a &#x60;name&#x60;. The domain name can contain the port for development instances, like &#x60;localhost:3000&#x60;. At the moment, instances can have only one primary domain, so the &#x60;is_satellite&#x60; parameter must be set to &#x60;true&#x60;. If you&#39;re planning to configure the new satellite domain to run behind a proxy, pass the &#x60;proxy_url&#x60; parameter accordingly.
    # @param [Hash] opts the optional parameters
    # @option opts [AddDomainRequest] :add_domain_request 
    # @return [Array<(Domain, Integer, Hash)>] Domain data, response status code and response headers
    # POST 
    def create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.add_domain ...'
      end
      # resource path
      local_var_path = '/domains'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_domain_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Domain'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DomainsApi.add_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#add_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a satellite domain
    # Deletes a satellite domain for the instance. It is currently not possible to delete the instance's primary domain.
    # @param domain_id [String] The ID of the domain that will be deleted. Must be a satellite domain.
    # @param [Hash] opts the optional parameters
    # @return [DeletedObject]

    def delete(domain_id, opts = {})
      data, _status_code, _headers = delete_with_http_info(domain_id, opts)
      data
    end

    # Delete a satellite domain
    # Deletes a satellite domain for the instance. It is currently not possible to delete the instance&#39;s primary domain.
    # @param domain_id [String] The ID of the domain that will be deleted. Must be a satellite domain.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    # DELETE 
    def delete_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.delete_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.delete_domain"
      end
      # resource path
      local_var_path = '/domains/{domain_id}'.sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeletedObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DomainsApi.delete_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#delete_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all instance domains
    # Use this endpoint to get a list of all domains for an instance. The response will contain the primary domain for the instance and any satellite domains. Each domain in the response contains information about the URLs where Clerk operates and the required CNAME targets.
    # @param [Hash] opts the optional parameters
    # @return [Domains]

    def all(opts = {})
      data, _status_code, _headers = all_with_http_info(opts)
      data
    end

    # List all instance domains
    # Use this endpoint to get a list of all domains for an instance. The response will contain the primary domain for the instance and any satellite domains. Each domain in the response contains information about the URLs where Clerk operates and the required CNAME targets.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Domains, Integer, Hash)>] Domains data, response status code and response headers
    # GET 
    def all_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.list_domains ...'
      end
      # resource path
      local_var_path = '/domains'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Domains'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DomainsApi.list_domains",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#list_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a domain
    # The `proxy_url` can be updated only for production instances. Update one of the instance's domains. Both primary and satellite domains can be updated. If you choose to use Clerk via proxy, use this endpoint to specify the `proxy_url`. Whenever you decide you'd rather switch to DNS setup for Clerk, simply set `proxy_url` to `null` for the domain. When you update a production instance's primary domain name, you have to make sure that you've completed all the necessary setup steps for DNS and emails to work. Expect downtime otherwise. Updating a primary domain's name will also update the instance's home origin, affecting the default application paths.
    # @param domain_id [String] The ID of the domain that will be updated.
    # @param update_domain_request [UpdateDomainRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Domain]

    def update(domain_id, update_domain_request, opts = {})
      data, _status_code, _headers = update_with_http_info(domain_id, update_domain_request, opts)
      data
    end

    # Update a domain
    # The &#x60;proxy_url&#x60; can be updated only for production instances. Update one of the instance&#39;s domains. Both primary and satellite domains can be updated. If you choose to use Clerk via proxy, use this endpoint to specify the &#x60;proxy_url&#x60;. Whenever you decide you&#39;d rather switch to DNS setup for Clerk, simply set &#x60;proxy_url&#x60; to &#x60;null&#x60; for the domain. When you update a production instance&#39;s primary domain name, you have to make sure that you&#39;ve completed all the necessary setup steps for DNS and emails to work. Expect downtime otherwise. Updating a primary domain&#39;s name will also update the instance&#39;s home origin, affecting the default application paths.
    # @param domain_id [String] The ID of the domain that will be updated.
    # @param update_domain_request [UpdateDomainRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Domain, Integer, Hash)>] Domain data, response status code and response headers
    # PATCH 
    def update_with_http_info(domain_id, update_domain_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.update_domain ...'
      end
      # verify the required parameter 'domain_id' is set
      if @api_client.config.client_side_validation && domain_id.nil?
        fail ArgumentError, "Missing the required parameter 'domain_id' when calling DomainsApi.update_domain"
      end
      # verify the required parameter 'update_domain_request' is set
      if @api_client.config.client_side_validation && update_domain_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_domain_request' when calling DomainsApi.update_domain"
      end
      # resource path
      local_var_path = '/domains/{domain_id}'.sub('{' + 'domain_id' + '}', CGI.escape(domain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_domain_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Domain'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DomainsApi.update_domain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#update_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
